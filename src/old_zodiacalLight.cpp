#include<vector>

#include "zodiacalLight.h"
#include "rbf.h"

double zodiacalLight::integrate(vector<double> x, vector<double> y)
{
  if(x.size()!=y.size())
    {
      cerr << __FILE__ << ": " << __FUNCTION__ << ": Error: abcissa and ordinate vectors have different sizes" << endl;
    }

  //assumes x values are sorted

  double sum=0;

  for(int i=0;i<x.size()-1;i++)
    {
      sum += 0.5 * (x[i+1]-x[i]) * (y[i] + y[i+1]);
    }

  return sum;
}

void zodiacalLight::set_bandpass(vector<double> lambda, vector<double> eff)
{
  //Set up the wavelength dependence


  //generates interpolation functions for computing zodiacal light
  double loglambda[16] = {log(0.2), log(0.3), log(0.4), log(0.5),
			  log(0.7), log(0.9), log(1.0), log(1.2),
			  log(2.2), log(3.5), log(4.8), log(12.0),
			  log(25.0), log(60.0), log(100.0), log(140.0)};
  //W per sq m per sr per um
  double logIntensity[16] = {log(3.89e-8), log(6.62e-7), log(2.41e-6),
			     log(2.60e-6), log(1.84e-6), log(1.13e-6),
			     log(1.02e-6), log(6.60e-7), log(1.23e-7),
			     log(3.45e-8), log(7.55e-8), log(4.10e-7),
			     log(1.58e-7), log(8.01e-9), log(1.34e-9), 
			     log(2.80e-10)};
  

  //Counts per sq m per s
  /*double logCounts[16] = {log(0.92), log(23.51), log(114.07), log(153.82),
			  log(152.3), log(120.05), log(120.27), log(93.65),
			  log(31.93), log(14.29), log(42.88), log(582.52),
			  log(468.75), log(56.86), log(15.9), log(4.63)};
  */

  rbf wavelength;
  wavelength.interpolate(loglambda,logCounts,16,1);

  //Use the bandpass to work out the f(elong) constants, lambda to be in microns

  if(lambda.size()!=eff.size())
    {
      cerr << __FILE__ << ": " << __FUNCTION__ << ": Error: The bandpass lambda and eff vectors are not the same size" << endl;
      exit(1);
    }

  vector<double> eff_fabs(lambda.size());
  vector<double> eff_fabs_logl(lambda.size());

  for(int i=0;i<int(lambda.size());i++)
    {
      eff_fabs[i] = eff[i] * exp(wavelength.evaluate(log(lambda[i])));
      eff_fabs_logl[i] = eff_fabs[i] * log10(lambda[i]/0.5);
    }

  //now integrate over the bandpass to calculate the constants
  
  //first treat the easy scenarios
  if(lambda[0]>0.5)
    {
      fec.a02 = 0;
      fec.b02 = 0;
      fec.a25 = integrate(lambda,eff_fabs);
      fec.b25 = integrate(lambda,eff_fabs_logl);
    }
  else if(lambda.back() < 0.5)
    {      
      fec.a02 = integrate(lambda,eff_fabs);
      fec.b02 = integrate(lambda,eff_fabs_logl);
      fec.a25 = 0;
      fec.b25 = 0;
    }
  else
    {
      //search for the element before the breakpoint
      int breakpt=0;
      vector<double> lowx, lowy1, lowy2, upx, upy1, upy2;
      while(lambda[breakpt]<=0.5) 
	{
	  lowx.push_back(lambda[breakpt]);
	  lowy1.push_back(eff_fabs[breakpt]);
	  lowy2.push_back(eff_fabs_logl[breakpt]);
	  breakpt++;
	}
      
      if(lambda[breakpt]==0.5)
	{
	  upx.push_back(lambda[breakpt]);
	  upy1.push_back(eff_fabs[breakpt]);
	  upy2.push_back(eff_fabs_logl[breakpt]);
	}
      else
	{
	  //now insert an interpolated point at the breakpoint
	  lowx.push_back(0.5);
	  upx.push_back(0.5);

	  lowy1.push_back(eff_fabs[breakpt-1] + (0.5-lambda[breakpt-1])*(eff_fabs[breakpt]-eff_fabs[breakpt-1])/(lambda[breakpt]-lambda[breakpt-1]));
	  upy1.push_back(lowy1.back());

	  lowy2.push_back(eff_fabs_logl[breakpt-1] + (0.5-lambda[breakpt-1])*(eff_fabs_logl[breakpt]-eff_fabs_logl[breakpt-1])/(lambda[breakpt]-lambda[breakpt-1]));
	  upy2.push_back(lowy2.back());
	}

      //integrate over the two domains

      fec.a02 = integrate(lowx,lowy1);
      fec.b02 = integrate(lowx,lowy2);
      fec.a25 = integrate(upx,upy1);
      fec.b25 = integrate(upx,upy1);
    }

  cout << "felong(90) = " << felong(90) << endl;
}

zodiacalLight::zodiacalLight()
{
  //Set up the spatial dependence

  double lC_eb[492] = {0.32,0.46,0.63,0.82,1.04,1.17,1.04,0.82,0.63,0.46,0.32,0.2,-0.06,-0.28,-0.43,-0.53,-0.43,-0.28,-0.06,
		       0.39,0.55,0.74,0.97,1.24,1.39,1.24,0.97,0.74,0.55,0.39,0.24,-0.04,-0.26,-0.42,-0.53,-0.42,-0.26,-0.04,
		       0.46,0.63,0.86,1.12,1.42,1.65,1.42,1.12,0.86,0.63,0.46,0.31,-0.01,-0.25,-0.41,-0.53,-0.41,-0.25,-0.01,
		       0.52,0.72,0.98,1.26,1.26,0.98,0.72,0.52,0.36,0.01,-0.24,-0.41,-0.53,-0.41,-0.24,0.01,
		       0.56,0.77,1.06,1.06,0.77,0.56,0.38,0.02,-0.24,-0.41,-0.53,-0.41,-0.24,0.02,
		       0.58,0.79,1.08,1.08,0.79,0.58,0.39,0.03,-0.24,-0.41,-0.53,-0.41,-0.24,0.03,
		       0.56,0.77,1.06,1.06,0.77,0.56,0.38,0.02,-0.24,-0.41,-0.53,-0.41,-0.24,0.02,
		       0.52,0.72,0.98,1.26,1.26,0.98,0.72,0.52,0.36,0.01,-0.24,-0.41,-0.53,-0.41,-0.24,0.01,
		       0.46,0.63,0.86,1.12,1.42,1.65,1.42,1.12,0.86,0.63,0.46,0.31,-0.01,-0.25,-0.41,-0.53,-0.41,-0.25,-0.01,
		       0.39,0.55,0.74,0.97,1.24,1.39,1.24,0.97,0.74,0.55,0.39,0.24,-0.04,-0.26,-0.42,-0.53,-0.42,-0.26,-0.04,
		       0.32,0.46,0.63,0.82,1.04,1.17,1.04,0.82,0.63,0.46,0.32,0.2,-0.06,-0.28,-0.43,-0.53,-0.43,-0.28,-0.06,
		       0.26,0.38,0.51,0.67,0.86,0.98,0.86,0.67,0.51,0.38,0.26,0.15,-0.1,-0.3,-0.44,-0.53,-0.44,-0.3,-0.1,
		       0.19,0.29,0.42,0.55,0.69,0.8,0.69,0.55,0.42,0.29,0.19,0.09,-0.13,-0.32,-0.44,-0.53,-0.44,-0.32,-0.13,
		       0.12,0.21,0.31,0.43,0.56,0.66,0.56,0.43,0.31,0.21,0.12,0.04,-0.16,-0.33,-0.45,-0.53,-0.45,-0.33,-0.16,
		       0.05,0.14,0.23,0.33,0.45,0.55,0.45,0.33,0.23,0.14,0.05,-0.02,-0.19,-0.35,-0.46,-0.53,-0.46,-0.35,-0.19,
		       -0.09,-0.03,0.05,0.13,0.23,0.29,0.23,0.13,0.05,-0.03,-0.09,-0.15,-0.29,-0.4,-0.48,-0.53,-0.48,-0.4,-0.29,
		       -0.18,-0.12,-0.06,0.02,0.09,0.12,0.09,0.02,-0.06,-0.12,-0.18,-0.23,-0.35,-0.44,-0.5,-0.53,-0.5,-0.44,-0.35,
		       -0.25,-0.19,-0.13,-0.06,-0.01,0,-0.01,-0.06,-0.13,-0.19,-0.25,-0.29,-0.4,-0.48,-0.52,-0.53,-0.52,-0.48,-0.4,
		       -0.29,-0.24,-0.18,-0.12,-0.09,-0.09,-0.09,-0.12,-0.18,-0.24,-0.29,-0.34,-0.43,-0.5,-0.53,-0.53,-0.53,-0.5,-0.43,
		       -0.32,-0.27,-0.23,-0.17,-0.14,-0.14,-0.14,-0.17,-0.23,-0.27,-0.32,-0.36,-0.46,-0.53,-0.54,-0.53,-0.54,-0.53,-0.46,
		       -0.33,-0.29,-0.25,-0.19,-0.16,-0.16,-0.16,-0.19,-0.25,-0.29,-0.33,-0.37,-0.46,-0.53,-0.55,-0.53,-0.55,-0.53,-0.46,
		       -0.31,-0.28,-0.24,-0.2,-0.16,-0.16,-0.16,-0.2,-0.24,-0.28,-0.31,-0.35,-0.43,-0.52,-0.56,-0.53,-0.56,-0.52,-0.43,
		       -0.26,-0.23,-0.2,-0.16,-0.13,-0.12,-0.13,-0.16,-0.2,-0.23,-0.26,-0.3,-0.4,-0.5,-0.56,-0.53,-0.56,-0.5,-0.4,
		       -0.24,-0.2,-0.16,-0.12,-0.09,-0.05,-0.09,-0.12,-0.16,-0.2,-0.24,-0.29,-0.39,-0.49,-0.56,-0.53,-0.56,-0.49,-0.39,
		       -0.26,-0.23,-0.2,-0.16,-0.13,-0.12,-0.13,-0.16,-0.2,-0.23,-0.26,-0.3,-0.4,-0.5,-0.56,-0.53,-0.56,-0.5,-0.4,
		       -0.31,-0.28,-0.24,-0.2,-0.16,-0.16,-0.16,-0.2,-0.24,-0.28,-0.31,-0.35,-0.43,-0.52,-0.56,-0.53,-0.56,-0.52,-0.43,
		       -0.33,-0.29,-0.25,-0.19,-0.16,-0.16,-0.16,-0.19,-0.25,-0.29,-0.33,-0.37,-0.46,-0.53,-0.55,-0.53,-0.55,-0.53,-0.46};

  double eb[984] = {-25,-25,-25,-20,-25,-15,-25,-10,-25,-5,-25,0,-25,5,-25,10,-25,15,-25,20,-25,25,-25,30,-25,45,-25,60,-25,75,-25,90,-25,105,-25,120,-25,135,
		    -20,-25,-20,-20,-20,-15,-20,-10,-20,-5,-20,0,-20,5,-20,10,-20,15,-20,20,-20,25,-20,30,-20,45,-20,60,-20,75,-20,90,-20,105,-20,120,-20,135,
		    -15,-25,-15,-20,-15,-15,-15,-10,-15,-5,-15,0,-15,5,-15,10,-15,15,-15,20,-15,25,-15,30,-15,45,-15,60,-15,75,-15,90,-15,105,-15,120,-15,135,
		    -10,-25,-10,-20,-10,-15,-10,-10,-10,10,-10,15,-10,20,-10,25,-10,30,-10,45,-10,60,-10,75,-10,90,-10,105,-10,120,-10,135,
		    -5,-25,-5,-20,-5,-15,-5,15,-5,20,-5,25,-5,30,-5,45,-5,60,-5,75,-5,90,-5,105,-5,120,-5,135,
		    0,-25,0,-20,0,-15,0,15,0,20,0,25,0,30,0,45,0,60,0,75,0,90,0,105,0,120,0,135,
		    5,-25,5,-20,5,-15,5,15,5,20,5,25,5,30,5,45,5,60,5,75,5,90,5,105,5,120,5,135,
		    10,-25,10,-20,10,-15,10,-10,10,10,10,15,10,20,10,25,10,30,10,45,10,60,10,75,10,90,10,105,10,120,10,135,
		    15,-25,15,-20,15,-15,15,-10,15,-5,15,0,15,5,15,10,15,15,15,20,15,25,15,30,15,45,15,60,15,75,15,90,15,105,15,120,15,135,
		    20,-25,20,-20,20,-15,20,-10,20,-5,20,0,20,5,20,10,20,15,20,20,20,25,20,30,20,45,20,60,20,75,20,90,20,105,20,120,20,135,
		    25,-25,25,-20,25,-15,25,-10,25,-5,25,0,25,5,25,10,25,15,25,20,25,25,25,30,25,45,25,60,25,75,25,90,25,105,25,120,25,135,
		    30,-25,30,-20,30,-15,30,-10,30,-5,30,0,30,5,30,10,30,15,30,20,30,25,30,30,30,45,30,60,30,75,30,90,30,105,30,120,30,135,
		    35,-25,35,-20,35,-15,35,-10,35,-5,35,0,35,5,35,10,35,15,35,20,35,25,35,30,35,45,35,60,35,75,35,90,35,105,35,120,35,135,
		    40,-25,40,-20,40,-15,40,-10,40,-5,40,0,40,5,40,10,40,15,40,20,40,25,40,30,40,45,40,60,40,75,40,90,40,105,40,120,40,135,
		    45,-25,45,-20,45,-15,45,-10,45,-5,45,0,45,5,45,10,45,15,45,20,45,25,45,30,45,45,45,60,45,75,45,90,45,105,45,120,45,135,
		    60,-25,60,-20,60,-15,60,-10,60,-5,60,0,60,5,60,10,60,15,60,20,60,25,60,30,60,45,60,60,60,75,60,90,60,105,60,120,60,135,
		    75,-25,75,-20,75,-15,75,-10,75,-5,75,0,75,5,75,10,75,15,75,20,75,25,75,30,75,45,75,60,75,75,75,90,75,105,75,120,75,135,
		    90,-25,90,-20,90,-15,90,-10,90,-5,90,0,90,5,90,10,90,15,90,20,90,25,90,30,90,45,90,60,90,75,90,90,90,105,90,120,90,135,
		    105,-25,105,-20,105,-15,105,-10,105,-5,105,0,105,5,105,10,105,15,105,20,105,25,105,30,105,45,105,60,105,75,105,90,105,105,105,120,105,135,
		    120,-25,120,-20,120,-15,120,-10,120,-5,120,0,120,5,120,10,120,15,120,20,120,25,120,30,120,45,120,60,120,75,120,90,120,105,120,120,120,135,
		    135,-25,135,-20,135,-15,135,-10,135,-5,135,0,135,5,135,10,135,15,135,20,135,25,135,30,135,45,135,60,135,75,135,90,135,105,135,120,135,135,
		    150,-25,150,-20,150,-15,150,-10,150,-5,150,0,150,5,150,10,150,15,150,20,150,25,150,30,150,45,150,60,150,75,150,90,150,105,150,120,150,135,
		    165,-25,165,-20,165,-15,165,-10,165,-5,165,0,165,5,165,10,165,15,165,20,165,25,165,30,165,45,165,60,165,75,165,90,165,105,165,120,165,135,
		    180,-25,180,-20,180,-15,180,-10,180,-5,180,0,180,5,180,10,180,15,180,20,180,25,180,30,180,45,180,60,180,75,180,90,180,105,180,120,180,135,
		    195,-25,195,-20,195,-15,195,-10,195,-5,195,0,195,5,195,10,195,15,195,20,195,25,195,30,195,45,195,60,195,75,195,90,195,105,195,120,195,135,
		    210,-25,210,-20,210,-15,210,-10,210,-5,210,0,210,5,210,10,210,15,210,20,210,25,210,30,210,45,210,60,210,75,210,90,210,105,210,120,210,135,
		    225,-25,225,-20,225,-15,225,-10,225,-5,225,0,225,5,225,10,225,15,225,20,225,25,225,30,225,45,225,60,225,75,225,90,225,105,225,120,225,135};

  position.interpolate(eb,lC_eb,492,2);

};
