//        Functions for estimating the intensity of the zodiacal light
//                   in a user defined bandpass
//                Copyright (C) 2012 Matthew Penny
//                 penny@astronomy.ohio-state.edu

#include<vector>
#include<fstream>
#include<iostream>

#include "zodiacalLight.h"
#include "rbf.h"
#include "split.h"

double zodiacalLight::integrate(vector<double> x, vector<double> y)
{
  if(x.size()!=y.size())
    {
      cerr << __FILE__ << ": " << __FUNCTION__ << ": Error: abcissa and ordinate vectors have different sizes" << endl;
    }

  //assumes x values are sorted

  double sum=0;

  for(int i=0;i<int(x.size())-1;i++)
    {
      sum += 0.5 * (x[i+1]-x[i]) * (y[i] + y[i+1]);
    }

  return sum;
}

//void zodiacalLight::set_bandpass(vector<double> lambda, vector<double> eff)
void zodiacalLight::set_bandpass(vector<double> nu, vector<double> eff)
{
  //Set up the wavelength dependence


  //generates interpolation functions for computing zodiacal light

  //in PHz
  double lognu[16] = {log(0.00214137), log(0.00299792), log(0.00499653), 
		      log(0.0119917), log(0.0249827), log(0.0624567), 
		      log(0.0856549), log(0.136269), log(0.249827), 
		      log(0.299792), log(0.333102), log(0.428274), 
		      log(0.599584), log(0.74948), log(0.999307), 
		      log(1.49896)};

  //in Jansky arcsec-2
  double logFnu[16] = {log(4.30273e-05), log(0.000105059), log(0.000226081), 
		       log(0.000774224), log(0.000462888), log(1.36383e-05), 
		       log(3.31348e-06), log(4.66746e-06), log(7.45137e-06), 
		       log(7.99705e-06), log(7.17618e-06), log(7.06877e-06), 
		       log(5.09616e-06), log(3.0232e-06), log(4.67122e-07), 
		       log(1.21994e-08)};

  rbf frequency;
  frequency.interpolate(lognu,logFnu,16,1);

  //Use the bandpass to work out the f(elong) constants, lambda to be in microns

  //  if(lambda.size()!=eff.size())
  if(nu.size()!=eff.size())
    {
      cerr << __FILE__ << ": " << __FUNCTION__ << ": Error: The bandpass nu and eff vectors are not the same size" << endl;
      exit(1);
    }

  //vector<double> eff_fabs(lambda.size());
  //vector<double> eff_fabs_logl(lambda.size());
  vector<double> eff_fabs(nu.size());
  vector<double> eff_fabs_logn(nu.size());
  double avg_eff=0; //average throughput
  double dnu=0;     //bandwidth
  double nu1=0, nu2=0;

  //calculate the bandwidth and average throughput

  for(int i=0;i<int(nu.size());i++)
    {
      if(nu1==0 && eff[i]>0) nu1=nu[i];
      if(eff[i]>0) nu2=nu[i];
    }

  dnu = nu2-nu1;
  avg_eff = integrate(nu,eff)/dnu;
  //cout << "avg_eff = " << avg_eff << endl;

  /*  for(int i=0;i<int(lambda.size());i++)
    {
      eff_fabs[i] = eff[i] * exp(wavelength.evaluate(log(lambda[i])));
      eff_fabs_logl[i] = eff_fabs[i] * log10(lambda[i]/0.5);
      }*/
  for(int i=0;i<int(nu.size());i++)
    {
      eff_fabs[i] = eff[i]/avg_eff * exp(frequency.evaluate(log(nu[i])));
      eff_fabs_logn[i] = eff_fabs[i]/avg_eff * log10(0.599584/nu[i]);
      //cout << "eff_fabs(" << nu[i] << ") = " << eff_fabs[i] << " " << eff_fabs_logn[i] << endl;
    }

  //now integrate over the bandpass to calculate the constants
  //normalize the 

  //first treat the easy scenarios
  if(nu[0]>0.599584)
    {
      fec.a25 = 0;
      fec.b25 = 0;
      fec.a02 = integrate(nu,eff_fabs)/dnu;
      fec.b02 = integrate(nu,eff_fabs_logn)/dnu;
      //cout << "fec " << fec.a02 << "  " << fec.b02 << endl;
    }
  else if(nu.back() < 0.599584)
    {      
      fec.a25 = integrate(nu,eff_fabs)/dnu;
      fec.b25 = integrate(nu,eff_fabs_logn)/dnu;
      fec.a02 = 0;
      fec.b02 = 0;
      //cout << "fec " << fec.a25 << "  " << fec.b25 << endl;
    }
  else
    {
      //search for the element before the breakpoint
      int breakpt=0;
      vector<double> lowx, lowy1, lowy2, upx, upy1, upy2;
      while(nu[breakpt]<=0.599584) 
	{
	  lowx.push_back(nu[breakpt]);
	  lowy1.push_back(eff_fabs[breakpt]);
	  lowy2.push_back(eff_fabs_logn[breakpt]);
	  breakpt++;
	}
      
      if(nu[breakpt]==0.599584)
	{
	  upx.push_back(nu[breakpt]);
	  upy1.push_back(eff_fabs[breakpt]);
	  upy2.push_back(eff_fabs_logn[breakpt]);
	}
      else
	{
	  //now insert an interpolated point at the breakpoint
	  lowx.push_back(0.599584);
	  upx.push_back(0.599584);

	  lowy1.push_back(eff_fabs[breakpt-1] + (0.599584-nu[breakpt-1])*(eff_fabs[breakpt]-eff_fabs[breakpt-1])/(nu[breakpt]-nu[breakpt-1]));
	  upy1.push_back(lowy1.back());

	  lowy2.push_back(eff_fabs_logn[breakpt-1] + (0.599584-nu[breakpt-1])*(eff_fabs_logn[breakpt]-eff_fabs_logn[breakpt-1])/(nu[breakpt]-nu[breakpt-1]));
	  upy2.push_back(lowy2.back());
	}

      //integrate over the two domains

      fec.a25 = integrate(lowx,lowy1)/dnu;
      fec.b25 = integrate(lowx,lowy2)/dnu;
      fec.a02 = integrate(upx,upy1)/dnu;
      fec.b02 = integrate(upx,upy1)/dnu;

      //cout << "fec " << fec.a02 << "  " << fec.b02 << " " << fec.a25 << " " << fec.b25 << endl; 
    }
}

void zodiacalLight::set_bandpass(string filename)
{
  //Load a filter bandpass from a file

  ifstream in(filename.c_str());

  if(!in)
    {
      cerr << "Could not open throughput file " << filename << endl;
      exit(1);
    }

  //Make sure the first and last entries have zero throughput
  vector<double> nu(1,0);
  vector<double> eff(1,0);

  string line;
  vector<string> data;

  while(!in.eof())
    {
      getline(in,line);

      if(line.find("#")==string::npos)
	{
	  split(line,data);

	  if(int(data.size())>=2)
	    {
	      nu.push_back(atof(data[0].c_str()));
	      eff.push_back(atof(data[1].c_str()));
	    }
	}
    }

  nu.push_back(0);
  eff.push_back(0);

  //put the first and last 0 eff points in the right place - assume file was 
  //in the correct order

  nu[0] = nu[1]-0.5*(nu[2]-nu[1]);
  nu[nu.size()-1] = nu[nu.size()-2]+0.5*(nu[nu.size()-3]-nu[nu.size()-2]);

  set_bandpass(nu,eff);
}

zodiacalLight::zodiacalLight()
{
  //Set up the spatial dependence

  //ln of the flux relative to lambda=90, beta=0
  double lC_eb[492] = {0.74,1.06,1.45,1.9,2.39,2.7,2.39,1.9,1.45,1.06,0.74,0.46,-0.15,-0.64,-0.98,-1.21,-0.98,-0.64,-0.15,
0.9,1.26,1.69,2.23,2.85,3.21,2.85,2.23,1.69,1.26,0.9,0.56,-0.09,-0.61,-0.96,-1.21,-0.96,-0.61,-0.09,
1.07,1.46,1.97,2.59,3.26,3.79,3.26,2.59,1.97,1.46,1.07,0.71,-0.03,-0.57,-0.95,-1.21,-0.95,-0.57,-0.03,
1.21,1.67,2.26,2.91,2.91,2.26,1.67,1.21,0.82,0.02,-0.56,-0.95,-1.21,-0.95,-0.56,0.02,
1.29,1.78,2.43,2.43,1.78,1.29,0.88,0.05,-0.55,-0.95,-1.21,-0.95,-0.55,0.05,
1.34,1.83,2.5,2.5,1.83,1.34,0.9,0.06,-0.55,-0.95,-1.21,-0.95,-0.55,0.06,
1.29,1.78,2.43,2.43,1.78,1.29,0.88,0.05,-0.55,-0.95,-1.21,-0.95,-0.55,0.05,
1.21,1.67,2.26,2.91,2.91,2.26,1.67,1.21,0.82,0.02,-0.56,-0.95,-1.21,-0.95,-0.56,0.02,
1.07,1.46,1.97,2.59,3.26,3.79,3.26,2.59,1.97,1.46,1.07,0.71,-0.03,-0.57,-0.95,-1.21,-0.95,-0.57,-0.03,
0.9,1.26,1.69,2.23,2.85,3.21,2.85,2.23,1.69,1.26,0.9,0.56,-0.09,-0.61,-0.96,-1.21,-0.96,-0.61,-0.09,
0.74,1.06,1.45,1.9,2.39,2.7,2.39,1.9,1.45,1.06,0.74,0.46,-0.15,-0.64,-0.98,-1.21,-0.98,-0.64,-0.15,
0.59,0.86,1.18,1.55,1.98,2.26,1.98,1.55,1.18,0.86,0.59,0.34,-0.22,-0.68,-1,-1.21,-1,-0.68,-0.22,
0.43,0.68,0.97,1.26,1.59,1.85,1.59,1.26,0.97,0.68,0.43,0.21,-0.29,-0.73,-1.02,-1.21,-1.02,-0.73,-0.29,
0.27,0.47,0.72,0.99,1.29,1.52,1.29,0.99,0.72,0.47,0.27,0.09,-0.37,-0.77,-1.04,-1.21,-1.04,-0.77,-0.37,
0.12,0.32,0.53,0.76,1.04,1.26,1.04,0.76,0.53,0.32,0.12,-0.04,-0.44,-0.8,-1.06,-1.21,-1.06,-0.8,-0.44,
-0.21,-0.06,0.12,0.31,0.53,0.67,0.53,0.31,0.12,-0.06,-0.21,-0.35,-0.66,-0.91,-1.1,-1.21,-1.1,-0.91,-0.66,
-0.41,-0.28,-0.13,0.04,0.2,0.27,0.2,0.04,-0.13,-0.28,-0.41,-0.54,-0.8,-1.02,-1.15,-1.21,-1.15,-1.02,-0.8,
-0.57,-0.44,-0.29,-0.14,-0.03,0,-0.03,-0.14,-0.29,-0.44,-0.57,-0.67,-0.91,-1.1,-1.19,-1.21,-1.19,-1.1,-0.91,
-0.67,-0.55,-0.42,-0.27,-0.21,-0.2,-0.21,-0.27,-0.42,-0.55,-0.67,-0.78,-0.99,-1.15,-1.21,-1.21,-1.21,-1.15,-0.99,
-0.73,-0.63,-0.52,-0.38,-0.33,-0.32,-0.33,-0.38,-0.52,-0.63,-0.73,-0.83,-1.06,-1.21,-1.25,-1.21,-1.25,-1.21,-1.06,
-0.75,-0.66,-0.57,-0.44,-0.38,-0.37,-0.38,-0.44,-0.57,-0.66,-0.75,-0.86,-1.06,-1.21,-1.27,-1.21,-1.27,-1.21,-1.06,
-0.71,-0.64,-0.56,-0.45,-0.38,-0.37,-0.38,-0.45,-0.56,-0.64,-0.71,-0.8,-0.99,-1.19,-1.28,-1.21,-1.28,-1.19,-0.99,
-0.61,-0.54,-0.45,-0.37,-0.3,-0.28,-0.3,-0.37,-0.45,-0.54,-0.61,-0.68,-0.91,-1.15,-1.28,-1.21,-1.28,-1.15,-0.91,
-0.56,-0.46,-0.38,-0.28,-0.2,-0.12,-0.2,-0.28,-0.38,-0.46,-0.56,-0.66,-0.9,-1.14,-1.28,-1.21,-1.28,-1.14,-0.9,
-0.61,-0.54,-0.45,-0.37,-0.3,-0.28,-0.3,-0.37,-0.45,-0.54,-0.61,-0.68,-0.91,-1.15,-1.28,-1.21,-1.28,-1.15,-0.91,
-0.71,-0.64,-0.56,-0.45,-0.38,-0.37,-0.38,-0.45,-0.56,-0.64,-0.71,-0.8,-0.99,-1.19,-1.28,-1.21,-1.28,-1.19,-0.99,
		       -0.75,-0.66,-0.57,-0.44,-0.38,-0.37,-0.38,-0.44,-0.57,-0.66,-0.75,-0.86,-1.06,-1.21,-1.27,-1.21,-1.27,-1.21,-1.06};

  double eb[984] = {-25,-25,-25,-20,-25,-15,-25,-10,-25,-5,-25,0,-25,5,-25,10,-25,15,-25,20,-25,25,-25,30,-25,45,-25,60,-25,75,-25,90,-25,105,-25,120,-25,135,
		    -20,-25,-20,-20,-20,-15,-20,-10,-20,-5,-20,0,-20,5,-20,10,-20,15,-20,20,-20,25,-20,30,-20,45,-20,60,-20,75,-20,90,-20,105,-20,120,-20,135,
		    -15,-25,-15,-20,-15,-15,-15,-10,-15,-5,-15,0,-15,5,-15,10,-15,15,-15,20,-15,25,-15,30,-15,45,-15,60,-15,75,-15,90,-15,105,-15,120,-15,135,
		    -10,-25,-10,-20,-10,-15,-10,-10,-10,10,-10,15,-10,20,-10,25,-10,30,-10,45,-10,60,-10,75,-10,90,-10,105,-10,120,-10,135,
		    -5,-25,-5,-20,-5,-15,-5,15,-5,20,-5,25,-5,30,-5,45,-5,60,-5,75,-5,90,-5,105,-5,120,-5,135,
		    0,-25,0,-20,0,-15,0,15,0,20,0,25,0,30,0,45,0,60,0,75,0,90,0,105,0,120,0,135,
		    5,-25,5,-20,5,-15,5,15,5,20,5,25,5,30,5,45,5,60,5,75,5,90,5,105,5,120,5,135,
		    10,-25,10,-20,10,-15,10,-10,10,10,10,15,10,20,10,25,10,30,10,45,10,60,10,75,10,90,10,105,10,120,10,135,
		    15,-25,15,-20,15,-15,15,-10,15,-5,15,0,15,5,15,10,15,15,15,20,15,25,15,30,15,45,15,60,15,75,15,90,15,105,15,120,15,135,
		    20,-25,20,-20,20,-15,20,-10,20,-5,20,0,20,5,20,10,20,15,20,20,20,25,20,30,20,45,20,60,20,75,20,90,20,105,20,120,20,135,
		    25,-25,25,-20,25,-15,25,-10,25,-5,25,0,25,5,25,10,25,15,25,20,25,25,25,30,25,45,25,60,25,75,25,90,25,105,25,120,25,135,
		    30,-25,30,-20,30,-15,30,-10,30,-5,30,0,30,5,30,10,30,15,30,20,30,25,30,30,30,45,30,60,30,75,30,90,30,105,30,120,30,135,
		    35,-25,35,-20,35,-15,35,-10,35,-5,35,0,35,5,35,10,35,15,35,20,35,25,35,30,35,45,35,60,35,75,35,90,35,105,35,120,35,135,
		    40,-25,40,-20,40,-15,40,-10,40,-5,40,0,40,5,40,10,40,15,40,20,40,25,40,30,40,45,40,60,40,75,40,90,40,105,40,120,40,135,
		    45,-25,45,-20,45,-15,45,-10,45,-5,45,0,45,5,45,10,45,15,45,20,45,25,45,30,45,45,45,60,45,75,45,90,45,105,45,120,45,135,
		    60,-25,60,-20,60,-15,60,-10,60,-5,60,0,60,5,60,10,60,15,60,20,60,25,60,30,60,45,60,60,60,75,60,90,60,105,60,120,60,135,
		    75,-25,75,-20,75,-15,75,-10,75,-5,75,0,75,5,75,10,75,15,75,20,75,25,75,30,75,45,75,60,75,75,75,90,75,105,75,120,75,135,
		    90,-25,90,-20,90,-15,90,-10,90,-5,90,0,90,5,90,10,90,15,90,20,90,25,90,30,90,45,90,60,90,75,90,90,90,105,90,120,90,135,
		    105,-25,105,-20,105,-15,105,-10,105,-5,105,0,105,5,105,10,105,15,105,20,105,25,105,30,105,45,105,60,105,75,105,90,105,105,105,120,105,135,
		    120,-25,120,-20,120,-15,120,-10,120,-5,120,0,120,5,120,10,120,15,120,20,120,25,120,30,120,45,120,60,120,75,120,90,120,105,120,120,120,135,
		    135,-25,135,-20,135,-15,135,-10,135,-5,135,0,135,5,135,10,135,15,135,20,135,25,135,30,135,45,135,60,135,75,135,90,135,105,135,120,135,135,
		    150,-25,150,-20,150,-15,150,-10,150,-5,150,0,150,5,150,10,150,15,150,20,150,25,150,30,150,45,150,60,150,75,150,90,150,105,150,120,150,135,
		    165,-25,165,-20,165,-15,165,-10,165,-5,165,0,165,5,165,10,165,15,165,20,165,25,165,30,165,45,165,60,165,75,165,90,165,105,165,120,165,135,
		    180,-25,180,-20,180,-15,180,-10,180,-5,180,0,180,5,180,10,180,15,180,20,180,25,180,30,180,45,180,60,180,75,180,90,180,105,180,120,180,135,
		    195,-25,195,-20,195,-15,195,-10,195,-5,195,0,195,5,195,10,195,15,195,20,195,25,195,30,195,45,195,60,195,75,195,90,195,105,195,120,195,135,
		    210,-25,210,-20,210,-15,210,-10,210,-5,210,0,210,5,210,10,210,15,210,20,210,25,210,30,210,45,210,60,210,75,210,90,210,105,210,120,210,135,
		    225,-25,225,-20,225,-15,225,-10,225,-5,225,0,225,5,225,10,225,15,225,20,225,25,225,30,225,45,225,60,225,75,225,90,225,105,225,120,225,135};

  position.interpolate(eb,lC_eb,492,2);

};
